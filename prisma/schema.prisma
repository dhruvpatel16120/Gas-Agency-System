// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String
  userId          String    @unique // Custom user ID
  phone           String
  address         String
  password        String?   // Hashed password for credentials auth
  role            UserRole  @default(USER)
  remainingQuota  Int       @default(12)
  emailVerified   DateTime?
  image           String?
  resetToken      String?
  resetTokenExpiry DateTime?
  emailVerificationToken String?
  emailVerificationExpiry DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  bookings        Booking[]
  notifications   Notification[]
  accounts        Account[]
  sessions        Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Booking {
  id            String        @id @default(cuid())
  userId        String
  userName      String
  paymentMethod PaymentMethod
  status        BookingStatus @default(PENDING)
  requestedAt   DateTime      @default(now())
  deliveryDate  DateTime?
  deliveredAt   DateTime?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model Notification {
  id        String             @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean            @default(false)
  createdAt DateTime           @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum UserRole {
  USER
  ADMIN
}

enum PaymentMethod {
  COD
  UPI
}

enum BookingStatus {
  PENDING
  APPROVED
  DELIVERED
  CANCELLED
}

enum NotificationType {
  BOOKING_CREATED
  BOOKING_APPROVED
  BOOKING_DELIVERED
  PAYMENT_RECEIVED
  SYSTEM_UPDATE
}
