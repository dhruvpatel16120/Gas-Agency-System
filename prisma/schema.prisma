// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  name                    String
  userId                  String    @unique // Custom user ID
  phone                   String
  address                 String
  password                String? // Hashed password for credentials auth
  role                    UserRole  @default(USER)
  remainingQuota          Int       @default(12)
  emailVerified           DateTime?
  image                   String?
  resetToken              String?
  resetTokenExpiry        DateTime?
  emailVerificationToken  String?
  emailVerificationExpiry DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  // Relations
  bookings      Booking[]
  accounts      Account[]
  sessions      Session[]
  // Contact relations
  contactMessages ContactMessage[] @relation("UserContactMessages")
  contactReplies  ContactReply[]   @relation("UserContactReplies")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Booking {
  id            String        @id @default(cuid())
  userId        String
  userName      String
  userEmail     String?
  userPhone     String?
  userAddress   String?
  paymentMethod PaymentMethod
  quantity      Int           @default(1)
  receiverName  String?
  receiverPhone String?
  status        BookingStatus @default(PENDING)
  requestedAt   DateTime      @default(now())
  deliveryDate  DateTime?
  expectedDate  DateTime?
  deliveredAt   DateTime?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  events   BookingEvent[]
  payments Payment[]
  // Reverse relations for inventory and delivery
  reservation StockReservation?
  assignment  DeliveryAssignment?
  adjustments StockAdjustment[]

  @@map("bookings")
}

model BookingEvent {
  id          String        @id @default(cuid())
  bookingId   String
  status      BookingStatus
  title       String
  description String?
  createdAt   DateTime      @default(now())

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@map("booking_events")
}

enum UserRole {
  USER
  ADMIN
}

enum PaymentMethod {
  COD
  UPI
}

enum BookingStatus {
  PENDING
  APPROVED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model SystemSettings {
  id               String   @id @default("default")
  upiId            String?
  upiQrImageUrl    String?
  pricePerCylinder Int      @default(1100) // INR amount per cylinder
  updatedAt        DateTime @updatedAt
  createdAt        DateTime @default(now())

  @@map("system_settings")
}

model Payment {
  id        String        @id @default(cuid())
  bookingId String
  amount    Int // in paise (INR * 100)
  method    PaymentMethod
  status    PaymentStatus @default(PENDING)
  upiTxnId  String?
  createdAt DateTime      @default(now())

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@map("payments")
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

// Contact management
model ContactMessage {
  id                String         @id @default(cuid())
  userId            String
  subject           String
  message           String
  category          String?
  priority          String?
  relatedBookingId  String?
  preferredContact  String?
  phone             String?
  status            ContactStatus  @default(NEW)
  lastRepliedAt     DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  user    User            @relation("UserContactMessages", fields: [userId], references: [id], onDelete: Cascade)
  replies ContactReply[]

  @@index([userId])
  @@map("contact_messages")
}

model ContactReply {
  id         String          @id @default(cuid())
  messageId  String
  authorId   String
  body       String
  isAdmin    Boolean         @default(false)
  createdAt  DateTime        @default(now())

  message ContactMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  author  User           @relation("UserContactReplies", fields: [authorId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([authorId])
  @@map("contact_replies")
}

enum ContactStatus {
  NEW
  OPEN
  RESOLVED
  ARCHIVED
}

// Inventory management
model CylinderStock {
  id             String   @id @default("default")
  totalAvailable Int      @default(0)
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())

  adjustments StockAdjustment[]
  reservations StockReservation[]

  @@map("cylinder_stock")
}

model StockAdjustment {
  id        String               @id @default(cuid())
  stockId   String
  delta     Int
  type      StockAdjustmentType  @default(CORRECTION)
  reason    String?
  notes     String?
  bookingId String?
  batchId   String?
  createdAt DateTime             @default(now())

  stock   CylinderStock @relation(fields: [stockId], references: [id], onDelete: Cascade)
  booking Booking?       @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  batch   CylinderBatch? @relation(fields: [batchId], references: [id], onDelete: SetNull)

  @@index([stockId])
  @@index([bookingId])
  @@index([batchId])
  @@map("stock_adjustments")
}

model StockReservation {
  id         String                 @id @default(cuid())
  stockId    String
  bookingId  String
  quantity   Int
  status     StockReservationStatus @default(RESERVED)
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt

  stock   CylinderStock @relation(fields: [stockId], references: [id], onDelete: Cascade)
  booking Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([stockId])
  @@unique([bookingId])
  @@map("stock_reservations")
}

enum StockReservationStatus {
  RESERVED
  RELEASED
  CONSUMED
}

enum StockAdjustmentType {
  RECEIVE
  ISSUE
  DAMAGE
  AUDIT
  CORRECTION
}

model CylinderBatch {
  id          String           @id @default(cuid())
  supplier    String
  invoiceNo   String?
  quantity    Int
  receivedAt  DateTime         @default(now())
  notes       String?
  status      BatchStatus      @default(ACTIVE)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  adjustments StockAdjustment[]

  @@map("cylinder_batches")
}

enum BatchStatus {
  ACTIVE
  DEPLETED
  EXPIRED
}

// Delivery partners and assignments
model DeliveryPartner {
  id             String   @id @default(cuid())
  name           String
  phone          String
  email          String?
  vehicleNumber  String?
  serviceArea    String?
  capacityPerDay Int      @default(20)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  assignments DeliveryAssignment[]

  @@map("delivery_partners")
}

model DeliveryAssignment {
  id         String                   @id @default(cuid())
  bookingId  String
  partnerId  String
  status     DeliveryAssignmentStatus @default(ASSIGNED)
  notes      String?
  assignedAt DateTime                 @default(now())
  updatedAt  DateTime                 @updatedAt

  booking Booking         @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  partner DeliveryPartner @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@unique([bookingId])
  @@index([partnerId])
  @@map("delivery_assignments")
}

enum DeliveryAssignmentStatus {
  ASSIGNED
  PICKED_UP
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
}
